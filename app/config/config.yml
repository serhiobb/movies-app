imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@ProxyBundle/Resources/config/services.yml" }
parameters:
    locale: en
framework:
#    esi:             ~
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: false
    validation:      { enabled: true, enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
        gc_probability: 0
    fragments:       ~
    http_method_override: true
assetic:
    debug:          "%kernel.debug%"
    use_controller: true
    bundles:
      - AppBundle
    filters:
      compass:
         bin: /home/js/.rvm/gems/ruby-2.3.0/bin/compass
         apply_to: "\.scss$|\.sass$"
      cssrewrite: ~
    assets:
      images-gear:
        inputs: '%kernel.root_dir%/Resources/assets/images/gear.png'
        output: 'images/gear.png'
      images-facebook-soc:
        inputs: '%kernel.root_dir%/Resources/assets/images/facebook_soc.png'
        output: 'images/facebook_soc.png'
      images-twitter-soc:
        inputs: '%kernel.root_dir%/Resources/assets/images/twitter_soc.png'
        output: 'images/twitter_soc.png'
      images-linkedin-soc:
        inputs: '%kernel.root_dir%/Resources/assets/images/linkedin_soc.png'
        output: 'images/linkedin_soc.png'
      defaultgothicbgauge-webfont-eot:
        inputs: '%kernel.root_dir%/Resources/assets/fonts/defaultgothicbgauge-webfont.eot'
        output: 'fonts/defaultgothicbgauge-webfont.eot'
      defaultgothicbgauge-webfont-svg:
        inputs: '%kernel.root_dir%/Resources/assets/fonts/defaultgothicbgauge-webfont.svg'
        output: 'fonts/defaultgothicbgauge-webfont.svg'
      defaultgothicbgauge-webfont-ttf:
        inputs: '%kernel.root_dir%/Resources/assets/fonts/defaultgothicbgauge-webfont.ttf'
        output: 'fonts/defaultgothicbgauge-webfont.ttf'
      defaultgothicbgauge-webfont-woff:
        inputs: '%kernel.root_dir%/Resources/assets/fonts/defaultgothicbgauge-webfont.woff'
        output: 'fonts/defaultgothicbgauge-webfont.woff'
      sohogothicpro-regular-otf:
        inputs: '%kernel.root_dir%/Resources/assets/fonts/SohoGothicPro-Regular.otf'
        output: 'fonts/SohoGothicPro-Regular.otf'
# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    paths:
        '%kernel.root_dir%/../src/AppBundle/Resources/views/': 'AppBundle'

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
            json: Sonata\Doctrine\Types\JsonType
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        mappings:
            ApplicationSonataDashboardBundle: ~
            SonataDashboardBundle: ~
            ApplicationSonataUserBundle: ~
            SonataUserBundle: ~
            FOSUserBundle: ~
            SonataNotificationBundle: ~
            ApplicationSonataNotificationBundle: ~
# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }
sonata_cache:
    caches:
        esi:
            token: an unique security key # a random one is generated by default
            servers:
                - varnishadm -T 127.0.0.1:2000 {{ COMMAND }} "{{ EXPRESSION }}"
        ssi:
            token: an unique security key # a random one is generated by default
        symfony:
            token: s3cur3 # token used to clear the related cache
            php_cache_enabled: true # Optional (default: false), clear APC or PHP OPcache
            types: [mytype1, mycustomtype2] # Optional, you can restrict allowed cache types
            servers:
                - { domain: kooqit.local, ip: 127.0.0.1, port: 80}
sonata_user:
    security_acl: true
    manager_type: orm
sonata_notification:
    backend: sonata.notification.backend.runtime
sonata_block:
    default_contexts: [sonata_page_bundle]
    blocks:
        sonata.admin.block.admin_list:
          contexts:   [admin]
        sonata.admin_doctrine_orm.block.audit:
          contexts:   [admin]
        sonata.block.service.text:
        sonata.block.service.rss:
        sonata.user.block.menu:
        sonata.user.block.account:
        sonata.block.service.text:
fos_rest:
    routing_loader:
        default_format: json
    param_fetcher_listener: true
    body_listener: true
    #disable_csrf_role: ROLE_USER
    body_converter:
        enabled: false
    view:
        view_response_listener: force
nelmio_cors:
    defaults:
        allow_credentials: false
        allow_origin: []
        allow_headers: []
        allow_methods: []
        expose_headers: []
        max_age: 0
    paths:
        '^/api/':
            allow_origin: ['*']
            allow_headers: ['*']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE']
            max_age: 3600

sensio_framework_extra:
    request: { converters: true, auto_convert: true }
    view:    { annotations: false }
    router:  { annotations: true }
#    psr_message: { enabled: true }

fos_user:
    db_driver:      orm
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User
    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager
    service:
        user_manager: sonata.user.orm.user_manager
sonata_dashboard:
    default_container: sonata.dashboard.block.container
    # Entity Classes
    class:
        dashboard: Application\Sonata\DashboardBundle\Entity\Dashboard
        block:     Application\Sonata\DashboardBundle\Entity\Block
proxy:
    endpoints:
        httpbin:
            base_uri: 'http://httpbin.org/'
